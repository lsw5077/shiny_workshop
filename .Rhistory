filter(pop >= unique(input$pop.thresh))  %>%
filter(case_when("All" %in% input$country ~ pop >= unique(input$pop.thresh),
input$country == "" ~  1 == 2,
length(input$country) > 0 & "All" %nin% input$country ~ country.etc %in% input$country)) %>%
filter(case_when(unique(input$capital) == "Yes" ~ capital == 1))
world.cities %>%
filter(pop >= unique(input$pop.thresh))
world.cities %>%
filter(pop >= unique(input$pop.thresh))  %>%
filter(case_when("All" %in% input$country ~ pop >= unique(input$pop.thresh)
)
)
world.cities %>%
filter(pop >= unique(input$pop.thresh))  %>%
filter(case_when("All" %in% input$country ~ pop >= unique(input$pop.thresh),
input$country == "" ~  1 == 2
))
"All" %in% input$country
world.cities %>%
filter(pop >= unique(input$pop.thresh))  %>%
filter(case_when("All" %in% input$country ~ pop >= unique(input$pop.thresh)
))
world.cities %>%
filter(pop >= unique(input$pop.thresh))  %>%
filter(case_when("All" %in% input$country ~ pop >= unique(input$pop.thresh),
lengt(input$country) == 0 ~  1 == 2
))
world.cities %>%
filter(pop >= unique(input$pop.thresh))  %>%
filter(case_when("All" %in% input$country ~ pop >= unique(input$pop.thresh),
length(input$country) == 0 ~  1 == 2
))
world.cities %>%
rowwise() %>%
filter(pop >= unique(input$pop.thresh))  %>%
filter(case_when("All" %in% input$country ~ pop >= unique(input$pop.thresh),
length(input$country) == 0 ~  1 == 2,
length(input$country) > 0 & "All" %nin% input$country ~ country.etc %in% input$country))
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
world.cities %>%
rowwise() %>%
filter(pop >= input$pop.thresh) %>%
filter(case_when("All" %in% input$country ~ pop >= input$pop.thresh,
length(input$country) == 0 ~ country.etc == "None",
length(input$countryy) > 0 & "All" %nin% input$country ~
country.etc %in% input$country)) %>%
filter(case_when(input$capital == "Yes" ~ capital == 1))
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
world.cities
world.cities %>%
filter(pop >= 500000)
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
world.cities %>%
rowwise() %>%
filter(pop >= input$pop.thresh) %>%
filter(case_when("All" %in% input$country ~ pop >= input$pop.thresh
,length(input$country) == 0 ~ country.etc == "None"
,length(input$country) > 0 & "All" %nin% input$country ~
country.etc %in% input$country)) %>%
filter(case_when(input$capital == "Yes" ~ capital == 1
,input$capital == "No" ~ capital == 1 | capital == 0)) %>%
as.data.frame()
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
?nrow
?nrows
nrow(world.cities)
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
input <- data.frame(pop.thresh = 500, capital = "No", country = c("Angola", "China"))
world.cities %>%
rowwise() %>%
filter(pop >= input$pop.thresh) %>%
filter(case_when("All" %in% input$country ~ pop >= input$pop.thresh
,length(input$country) == 0 ~ country.etc == "None"
,length(input$country) > 0 & "All" %nin% input$country ~
country.etc %in% input$country)) %>%
filter(case_when(input$capital == "Yes" ~ capital == 1
,input$capital == "No" ~ capital == 1 | capital == 0)) %>%
as.data.frame()
world.cities %>%
rowwise() %>%
filter(pop >= input$pop.thresh) %>%
filter(case_when("All" %in% input$country ~ pop >= input$pop.thresh
,length(input$country) == 0 ~ country.etc == "None"
,length(input$country) > 0 & "All" %nin% input$country ~
country.etc %in% input$country))
world.cities %>%
rowwise() %>%
filter(pop >= input$pop.thresh)
input
input <- data.frame(pop.thresh = 500, capital = "No", country = c("Angola"))
,input$capital == "No" ~ capital == 1 | capital == 0)) %>%
as.data.frame()
world.cities %>%
rowwise() %>%
filter(pop >= input$pop.thresh) %>%
filter(case_when("All" %in% input$country ~ pop >= input$pop.thresh
,length(input$country) == 0 ~ country.etc == "None"
,length(input$country) > 0 & "All" %nin% input$country ~
country.etc %in% input$country)) %>%
filter(case_when(input$capital == "Yes" ~ capital == 1
,input$capital == "No" ~ capital == 1 | capital == 0))
world.cities %>%
rowwise() %>%
filter(pop >= input$pop.thresh)
world.cities %>%
rowwise() %>%
filter(pop >= input$pop.thresh) %>%
filter(case_when("All" %in% input$country ~ pop >= input$pop.thresh
,length(input$country) == 0 ~ country.etc == "None"
,length(input$country) > 0 & "All" %nin% input$country ~
country.etc %in% input$country))
`%nin%` <- negate(`%in%`)
world.cities %>%
rowwise() %>%
filter(pop >= input$pop.thresh) %>%
filter(case_when("All" %in% input$country ~ pop >= input$pop.thresh
,length(input$country) == 0 ~ country.etc == "None"
,length(input$country) > 0 & "All" %nin% input$country ~
country.etc %in% input$country))
world.cities %>%
rowwise() %>%
filter(pop >= input$pop.thresh) %>%
filter(case_when("All" %in% input$country ~ pop >= input$pop.thresh
,length(input$country) == 0 ~ country.etc == "None"
,length(input$country) > 0 & "All" %nin% input$country ~
country.etc %in% input$country)) %>%
filter(case_when(input$capital == "Yes" ~ capital == 1
,input$capital == "No" ~ capital == 1 | capital == 0))
world.cities %>%
rowwise() %>%
filter(pop >= input$pop.thresh) %>%
filter(case_when("All" %in% input$country ~ pop >= input$pop.thresh
,length(input$country) == 0 ~ country.etc == "None"
,length(input$country) > 0 & "All" %nin% input$country ~
country.etc %in% input$country)) %>%
filter(case_when(input$capital == "Yes" ~ capital == 1
,input$capital == "No" ~ capital == 1 | capital == 0)) %>%
as.data.frame()
,input$capital == "No" ~ capital == 1 | capital == 0)) %>%
as.data.frame()
,input$capital == "No" ~ capital == 1 | capital == 0)) %>%
as.data.frame()
world.cities %>%
rowwise() %>%
filter(pop >= input$pop.thresh) %>%
filter(case_when("All" %in% input$country ~ pop >= input$pop.thresh
,length(input$country) == 0 ~ country.etc == "None"
,length(input$country) > 0 & "All" %nin% input$country ~
country.etc %in% input$country))
world.cities %>%
rowwise() %>%
filter(pop >= input$pop.thresh) %>%
filter(case_when("All" %in% input$country ~ pop >= input$pop.thresh
,length(input$country) == 0 ~ country.etc == "None"
,length(input$country) > 0 & "All" %nin% input$country ~
country.etc %in% input$country)) %>%
filter(case_when(input$capital == "Yes" ~ capital == 1
,input$capital == "No" ~ capital == 1 | capital == 0))
,input$capital == "No" ~ capital == 1 | capital == 0)) %>%
as.data.frame()
c(input$country)
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
head(world.cities)
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
dim(world.cities)[2]
npoints <- dim(world.cities)[2]
world.cities
dim(world.cities)[1]
npoints <- dim(world.cities)[1]
points %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!"),
country.etc = case_when(npoints > 0 ~ country.etc,
npoints == 0 ~ NA),
pop = case_when(npoints > 0 ~ pop,
npoints == 0 ~ NA),
lat = case_when(npoints > 0 ~ lat,
npoints == 0 ~ 36),
long = case_when(npoints > 0 ~ long,
npoints == 0 ~ -40),
capital = case_when(npoints > 0 ~ capital,
npoints == 0 ~ NA))
points %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!")
)
points
points <- world.cities %>% filter(pop > 500000)
npoints <- dim(world.cities)[1]
npoints
npoints <- dim(points)[1]
npoints
points %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!"),
country.etc = case_when(npoints > 0 ~ country.etc,
npoints == 0 ~ NA),
pop = case_when(npoints > 0 ~ pop,
npoints == 0 ~ NA),
lat = case_when(npoints > 0 ~ lat,
npoints == 0 ~ 36),
long = case_when(npoints > 0 ~ long,
npoints == 0 ~ -40),
capital = case_when(npoints > 0 ~ capital,
npoints == 0 ~ NA))
points %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!")
)
points %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!"),
country.etc = case_when(npoints > 0 ~ country.etc,
npoints == 0 ~ NA)
)
points %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!"),
country.etc = case_when(npoints > 0 ~ country.etc,
npoints == 0 ~ NA))
points %>%
rowwise() %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!"),
country.etc = case_when(npoints > 0 ~ country.etc,
npoints == 0 ~ NA))
points %>%
rowwise() %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!"),
country.etc = case_when(npoints > 0 ~ as.character(country.etc),
npoints == 0 ~ NA))
npoints
points %>%
rowwise() %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!"),
country.etc = case_when(npoints > 0 ~ country.etc,
npoints == 0 ~ NA_character_))
points %>%
rowwise() %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!"),
country.etc = case_when(npoints > 0 ~ country.etc,
npoints == 0 ~ NA_character_),
pop = case_when(npoints > 0 ~ pop,
npoints == 0 ~ NA_character_),
lat = case_when(npoints > 0 ~ lat,
npoints == 0 ~ 36),
long = case_when(npoints > 0 ~ long,
npoints == 0 ~ -40),
capital = case_when(npoints > 0 ~ capital,
npoints == 0 ~ NA_character_))
points %>%
rowwise() %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!"),
country.etc = case_when(npoints > 0 ~ country.etc,
npoints == 0 ~ NA_character_),
pop = case_when(npoints > 0 ~ pop,
npoints == 0 ~ NA_integer_),
lat = case_when(npoints > 0 ~ lat,
npoints == 0 ~ 36),
long = case_when(npoints > 0 ~ long,
npoints == 0 ~ -40),
capital = case_when(npoints > 0 ~ capital,
npoints == 0 ~ NA_character_))
points %>%
rowwise() %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!"),
country.etc = case_when(npoints > 0 ~ country.etc,
npoints == 0 ~ NA_character_),
pop = case_when(npoints > 0 ~ pop,
npoints == 0 ~ NA_integer_),
lat = case_when(npoints > 0 ~ lat,
npoints == 0 ~ 36),
long = case_when(npoints > 0 ~ long,
npoints == 0 ~ -40),
capital = case_when(npoints > 0 ~ capital,
npoints == 0 ~ NA_integer_))
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
points <- world.cities %>% filter(pop <1)
dim(points)
points
points <- world.cities %>%
filter(pop >= 500000) %>%
filter(pop <1)
points
dim(points)
nrow(points)
npoints <- nrow(points)
points %>%
rowwise() %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!"),
country.etc = case_when(npoints > 0 ~ country.etc,
npoints == 0 ~ NA_character_),
pop = case_when(npoints > 0 ~ pop,
npoints == 0 ~ NA_integer_),
lat = case_when(npoints > 0 ~ lat,
npoints == 0 ~ 36),
long = case_when(npoints > 0 ~ long,
npoints == 0 ~ -40),
capital = case_when(npoints > 0 ~ capital,
npoints == 0 ~ NA_integer_))
npoints <- nrow(points)
npoints
points %>%
rowwise() %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!"),
country.etc = case_when(npoints > 0 ~ country.etc,
npoints == 0 ~ NA_character_),
pop = case_when(npoints > 0 ~ pop,
npoints == 0 ~ NA_integer_),
lat = case_when(npoints > 0 ~ lat,
npoints == 0 ~ 36),
long = case_when(npoints > 0 ~ long,
npoints == 0 ~ -40),
capital = case_when(npoints > 0 ~ capital,
npoints == 0 ~ NA_integer_))
npoints
points %>%
rowwise() %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!"),
country.etc = case_when(npoints > 0 ~ country.etc,
npoints == 0 ~ NA_character_)
)
points %>%
rowwise() %>%
mutate(name = case_when(npoints > 0 ~ name,
npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!"),
country.etc = case_when(npoints == 0 ~ NA_character_,
npoints > 0 ~ country.etc))
points %>%
rowwise() %>%
mutate(name = case_when(npoints == 0 ~ "Select a valid population-country-capital
combination to view cities!",
npoints > 0 ~ name
)
)
points %>%
rowwise() %>%
mutate(name = case_when(npoints == 0 ~ c(name, "Select a valid population-country-capital
combination to view cities!"),
npoints > 0 ~ name
)
)
points %>%
rowwise() %>%
mutate(name = ifelse(npoints == 0, "Select a valid population-country-capital
combination to view cities!"), name
)
points %>%
rowwise() %>%
mutate(name = ifelse(npoints == 0, "Select a valid population-country-capital
combination to view cities!", name
))
points %>%
mutate(name = ifelse(npoints == 0, "Select a valid population-country-capital
combination to view cities!", name
))
points %>%
mutate(name = ifelse(npoints == 0, c("Select a valid population-country-capital
combination to view cities!", name), name))
points %>%
mutate(name = ifelse(npoints == 0, rbind("Select a valid population-country-capital
combination to view cities!", name), name))
points %>%
mutate(name = if(npoints == 0){"Select a valid population-country-capital"})                                     combination to view cities!", name), name)),
country.etc = case_when(npoints == 0 ~ NA_character_,
npoints > 0 ~ country.etc)),
pop = case_when(npoints > 0 ~ pop,
npoints == 0 ~ NA_integer_),
lat = case_when(npoints > 0 ~ lat,
npoints == 0 ~ 36),
long = case_when(npoints > 0 ~ long,
npoints == 0 ~ -40),
capital = case_when(npoints > 0 ~ capital,
npoints == 0 ~ NA_integer_))
points %>%
mutate(name = if(npoints == 0){"Select a valid population-country-capital"})
if(npoints == 0) {
points <- data.frame(name = "Select a valid population-country-capital combination to view cities!",
country.etc = NA,
pop = NA,
lat = 36,
long = -40,
capital = NA)
}
points
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
names(world.cities)
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
mean(0.6)
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/leafletActivity/assignment_map.R')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
runApp('exampleApps/Chad_functions')
runApp('exampleApps/leafletActivity/assignment_map_solution_updated.R')
a !%in% c(a,b,c)
!a %in% c(a,b,c)
!("a") %in% c("a","b","c")
!("a" %in% c("a","b","c"))
runApp('exampleApps/CrappieFishApp')
runApp('exampleApps/CrappieFishApp')
runApp('exampleApps/CrappieFishApp')
runApp('exampleApps/CrappieFishApp')
runApp('exampleApps/CrappieFishApp')
runApp('exampleApps/CrappieFishApp')
runApp('exampleApps/CrappieFishApp')
shiny::runApp('exampleApps/CrappieFishApp')
runApp('exampleApps/CrappieFishApp')
runApp('C:/Users/Lyndsie/AppData/Local/Temp/Temp1_CrappieFishApp (2).zip/CrappieFishApp')
runGitHub( "CrappieFishApp", "<lsw5077>")
runGitHub( "CrappieFishApp", "lsw5077")
library(shiny)
runGitHub( "CrappieFishApp", "lsw5077")
library(shiny); runApp('exampleApps/improved_crappie_app/improved_app.R')
getwd()
runApp('exampleApps/improved_crappie_app/improved_app.R')
install.packages("mathjax")
install.packages("MathJax")
runApp('exampleApps/improved_crappie_app/improved_app.R')
runApp('exampleApps/improved_crappie_app/improved_app.R')
runApp('exampleApps/improved_crappie_app/improved_app.R')
runApp('exampleApps/improved_crappie_app/improved_app.R')
runApp('exampleApps/improved_crappie_app/improved_app.R')
runApp('exampleApps/improved_crappie_app/improved_app.R')
