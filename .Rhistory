filter(nest_type == "Cavity")%>%
select(common_name,
scientific_name,
nest_type,
egg_capacity,
wingspan,
forest,
grassland,
wetland,
invertebrate,
seed,
fish,
fruit,
rodent,
nectar,
any_food)
platform_nesters %>%
mutate(egg_efficiency = # calculate return of eggs/ unit food
egg_capacity/
(seed + fish +
fruit + rodent +
nectar + any_food)) %>%
arrange(desc(egg_efficiency)) %>% # arrange in descending order
select(common_name, egg_efficiency) %>%
filter(egg_efficiency >= 3) # keep only birds with efficiency >= 3
cavity_nesters %>%
mutate(egg_efficiency = # calculate return of eggs/ unit food
egg_capacity/
(seed + fish +
fruit + rodent +
nectar + any_food)) %>%
arrange(desc(egg_efficiency)) %>% # arrange in descending order
select(common_name, egg_efficiency) %>%
filter(egg_efficiency >= 3) # keep only birds with efficiency >= 3
calc_egg_eff(bird_df = platform_nesters,
egg_threshold = 3)
bird_df %>%
mutate(egg_efficiency = # calculate return of eggs/ unit food
egg_capacity/
(seed + fish +
fruit + rodent +
nectar + any_food)) %>%
arrange(desc(egg_efficiency))
cavity_nesters %>%
mutate(egg_efficiency = # calculate return of eggs/ unit food
egg_capacity/
(seed + fish +
fruit + rodent +
nectar + any_food)) %>%
arrange(desc(egg_efficiency))
calc_egg_eff(bird_df = cavity_nesters,
egg_threshold = 3)
calc_egg_eff(bird_df = platform_nesters,
egg_threshold = 3)
calc_egg_eff(bird_df = platform_nesters,
egg_threshold = 3)
rainbow()
rainbow(n = 10)
ggplot(platform_summary) +
geom_bar(aes(x = common_name,
y = egg_efficiency,
fill = common_name))
platform_summary <-  calc_egg_eff(bird_df = platform_nesters,
egg_threshold = 3)
ggplot(platform_summary) +
geom_bar(aes(x = common_name,
y = egg_efficiency,
fill = common_name))
ggplot(platform_summary) +
geom_bar(aes(x = common_name,
y = egg_efficiency,
fill = common_name), stat = "identity") +
theme_bw()
platform_plot <- ggplot(platform_summary) +
geom_bar(aes(x = common_name,
y = egg_efficiency,
fill = common_name), stat = "identity") +
theme_bw()
colorblindr::cvd_grid(platform_plot)
wingspan::birds
wingspan::birds$victory_points
plot(wingspan::birds$wingspan, wingspan::birds$victory_points)
plot(wingspan::birds$egg_capacity, wingspan::birds$victory_points)
wingspan::birds$predator
ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points)) +
theme_bw()
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
birds <- wingspan::birds
Data1 <- birds %>% filter(nest_type == "Platform")
data_2 <- birds %>% filter(nest_type == "Cavity")
birds <- wingspan::birds
data_1 <- birds %>% filter(nest_type == "Platform")
data_2 <- birds %>% filter(nest_type == "Cavity")
birds <- wingspan::birds
platform_nesters <- birds %>% filter(nest_type == "Platform")
cavity_nesters <- birds %>% filter(nest_type == "Cavity")
# Make a dataframe of platform nesters and a dataframe of cavity nesters
# using the birds data from the wingspan package and the filter()
# function from the dplyr package.
birds <- wingspan::birds
platform_nesters <- birds %>% filter(nest_type == "Platform")
cavity_nesters <- birds %>% filter(nest_type == "Cavity")
# Make a dataframe of platform nesters and a dataframe of cavity nesters
# using the birds data from the wingspan package and the filter()
# function from the dplyr package.
# Update: added select function to select several columns
birds <- wingspan::birds
platform_nesters <- birds %>% filter(nest_type == "Platform") %>% select(common_name, scientific_name, nest_type, egg_capacity, wingspan, forest, grassland, wetland, invertebrate, seed, fish, fruit, rodent, nectar, any_food)
cavity_nesters <- birds %>% filter(nest_type == "Cavity")%>% select(common_name, scientific_name, nest_type, egg_capacity, wingspan, forest, grassland, wetland, invertebrate, seed, fish, fruit, rodent, nectar, any_food)
# Make a dataframe of platform nesters and a dataframe of cavity nesters
# using the birds data from the wingspan package and the filter()
# function from the dplyr package.
# Update: added select function to select several columns
birds <- wingspan::birds
platform_nesters <- birds %>%
filter(nest_type == "Platform") %>%
select(common_name,
scientific_name,
nest_type,
egg_capacity,
wingspan,
forest,
grassland,
wetland,
invertebrate,
seed,
fish,
fruit,
rodent,
nectar,
any_food)
cavity_nesters <- birds %>%
filter(nest_type == "Cavity")%>%
select(common_name,
scientific_name,
nest_type,
egg_capacity,
wingspan,
forest,
grassland,
wetland,
invertebrate,
seed,
fish,
fruit,
rodent,
nectar,
any_food)
platform_nesters %>%
mutate(egg_efficiency = # calculate return of eggs/ unit food
egg_capacity/
(seed + fish +
fruit + rodent +
nectar + any_food)) %>%
arrange(desc(egg_efficiency)) %>% # arrange in descending order
select(common_name, egg_efficiency) %>%
filter(egg_efficiency >= 3) # keep only birds with efficiency >= 3
cavity_nesters %>%
mutate(egg_efficiency = # calculate return of eggs/ unit food
egg_capacity/
(seed + fish +
fruit + rodent +
nectar + any_food)) %>%
arrange(desc(egg_efficiency)) %>% # arrange in descending order
select(common_name, egg_efficiency) %>%
filter(egg_efficiency >= 3) # keep only birds with efficiency >= 3
# Writing a function to calculate egg efficiency and keep only birds above a critical
# egg efficiency value
calc_egg_eff <- function(bird_df, # function arguments with no defaults. Bird dataframe
egg_threshold){ # work just like any other function. Critical egg threshold.
bird_df <- bird_df %>%
mutate(egg_efficiency = # calculate return of eggs/ unit food
egg_capacity/
(seed + fish +
fruit + rodent +
nectar + any_food)) %>%
arrange(desc(egg_efficiency)) %>% # arrange in descending order
select(common_name, egg_efficiency) %>%
filter(egg_efficiency >= egg_threshold)
# what to return when the function is called.
return(bird_df)
}
# make a summary dataframe of platform nesters including only birds with egg efficiency greater than 3.
calc_egg_eff(bird_df = platform_nesters,
egg_threshold = 3)  # keep only birds with efficiency >= 3
# And make a summary dataframe for cavity nesters
calc_egg_eff(bird_df = cavity_nesters,
egg_threshold = 3)
ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points)) +
theme_bw()
ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator)) +
theme_bw()
ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator),
size = 2, alpha = 0.5) +
theme_bw()
ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator),
size = 3, alpha = 0.5) +
theme_bw()
?cvd_grid
victory_plot <- ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator),
size = 3, alpha = 0.5) +
theme_bw()
cvd_grid(victory_plot)
library(colorblindr)
victory_plot <- ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator),
size = 3, alpha = 0.5) +
theme_bw()
cvd_grid(victory_plot)
victory_plot <- ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator),
size = 3, alpha = 0.5) +
scale_color_manual("FALSE" = "red",
"TRUE" = "green") +
theme_bw()
victory_plot <- ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator),
size = 3, alpha = 0.5) +
scale_color_manual(values = c("FALSE" = "red",
"TRUE" = "green")) +
theme_bw()
cvd_grid(victory_plot)
victory_plot <- ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator),
size = 3, alpha = 0.5) +
scale_color_manual(values = c("FALSE" = "darkred",
"TRUE" = "darkgreen")) +
theme_bw()
cvd_grid(victory_plot)
knitr::opts_chunk$set(echo = FALSE)
library(wingspan)
library(colorblindr)
library(tidyverse)
victory_plot <- ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator),
size = 3, alpha = 0.5) +
scale_color_manual(values = c("FALSE" = "darkred",
"TRUE" = "darkgreen")) +
theme_bw()
# print victory_plot
victory_plot
# Simulate what victory_plot would look like to people with different
# kinds of color blindness.
cvd_grid(victory_plot)
ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator),
size = 3, alpha = 0.5) +
scale_color_manual(values = c("FALSE" = "#67a9cf",
"TRUE" = "#016c59")) +
theme_bw()
ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator),
size = 3) +
scale_color_manual(values = c("FALSE" = "#67a9cf",
"TRUE" = "#016c59")) +
theme_bw()
ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator),
size = 3) +
scale_color_manual(values = c("FALSE" = "darkred",
"TRUE" = "darkgreen")) +
theme_bw()
victory_plot <- ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator),
size = 3) +
scale_color_manual(values = c("FALSE" = "darkred",
"TRUE" = "darkgreen")) +
theme_bw()
# print victory_plot
victory_plot
cvd_grid(victory_plot)
victory_plot_cbf <- ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator),
size = 3) +
scale_color_manual(values = c("FALSE" = "#67a9cf",
"TRUE" = "#016c59")) +
theme_bw()
victory_plot_cbf
cvd_grid(victory_plot_cbf)
distill:create_article("ShinyBestPractices.Rmd")
library(distill)
distill:create_article("ShinyBestPractices.Rmd")
distill_article("ShinyBestPractices.Rmd")
distill:create_article("ShinyBestPractices.Rmd")
distill::create_article(file = "ShinyBestPractices.Rmd")
library(wingspan)
library(colorblindr)
library(tidyverse)
birds <- wingspan::birds
Data1 <- birds %>% filter(nest_type == "Platform")
data_2 <- birds %>% filter(nest_type == "Cavity")
birds <- wingspan::birds
data_1 <- birds %>% filter(nest_type == "Platform")
data_2 <- birds %>% filter(nest_type == "Cavity")
birds <- wingspan::birds
platform_nesters <- birds %>% filter(nest_type == "Platform")
cavity_nesters <- birds %>% filter(nest_type == "Cavity")
birds <- wingspan::birds
platform_nesters <- birds %>% filter(nest_type == "Platform")
cavity_nesters <- birds %>% filter(nest_type == "Cavity")
birds <- wingspan::birds
platform_nesters <- birds %>% filter(nest_type == "Platform") %>% select(common_name, scientific_name, nest_type, egg_capacity, wingspan, forest, grassland, wetland, invertebrate, seed, fish, fruit, rodent, nectar, any_food)
cavity_nesters <- birds %>% filter(nest_type == "Cavity")%>% select(common_name, scientific_name, nest_type, egg_capacity, wingspan, forest, grassland, wetland, invertebrate, seed, fish, fruit, rodent, nectar, any_food)
birds <- wingspan::birds
platform_nesters <- birds %>%
filter(nest_type == "Platform") %>%
select(common_name,
scientific_name,
nest_type,
egg_capacity,
wingspan,
forest,
grassland,
wetland,
invertebrate,
seed,
fish,
fruit,
rodent,
nectar,
any_food)
cavity_nesters <- birds %>%
filter(nest_type == "Cavity")%>%
select(common_name,
scientific_name,
nest_type,
egg_capacity,
wingspan,
forest,
grassland,
wetland,
invertebrate,
seed,
fish,
fruit,
rodent,
nectar,
any_food)
platform_nesters %>%
mutate(egg_efficiency = # calculate return of eggs/ unit food
egg_capacity/
(seed + fish +
fruit + rodent +
nectar + any_food)) %>%
arrange(desc(egg_efficiency)) %>% # arrange in descending order
select(common_name, egg_efficiency) %>%
filter(egg_efficiency >= 3) # keep only birds with efficiency >= 3
cavity_nesters %>%
mutate(egg_efficiency = # calculate return of eggs/ unit food
egg_capacity/
(seed + fish +
fruit + rodent +
nectar + any_food)) %>%
arrange(desc(egg_efficiency)) %>% # arrange in descending order
select(common_name, egg_efficiency) %>%
filter(egg_efficiency >= 3) # keep only birds with efficiency >= 3
calc_egg_eff <- function(bird_df, # function arguments with no defaults. Bird dataframe
egg_threshold){ # work just like any other function. Critical egg threshold.
bird_df <- bird_df %>%
mutate(egg_efficiency = # calculate return of eggs/ unit food
egg_capacity/
(seed + fish +
fruit + rodent +
nectar + any_food)) %>%
arrange(desc(egg_efficiency)) %>% # arrange in descending order
select(common_name, egg_efficiency) %>%
filter(egg_efficiency >= egg_threshold)
# what to return when the function is called.
return(bird_df)
}
calc_egg_eff(bird_df = platform_nesters,
egg_threshold = 3)  # keep only birds with efficiency >= 3
victory_plot <- ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator),
size = 3) +
scale_color_manual(values = c("FALSE" = "darkred",
"TRUE" = "darkgreen")) +
theme_bw()
victory_plot
cvd_grid(victory_plot)
victory_plot_cbf <- ggplot(birds) +
geom_point(aes(x = wingspan,
y = victory_points,
color = predator),
size = 3) +
scale_color_manual(values = c("FALSE" = "#67a9cf",
"TRUE" = "#016c59")) +
theme_bw()
victory_plot_cbf
cvd_grid(victory_plot_cbf)
knitr::opts_chunk$set(echo = FALSE)
data.frame(Time = c("Prior to event",
"09:00-11:00 EST",
"11:00-12:00 EST"),
Description = c("Watch pre-recorded lectures/
coding sessions (these videos
are available in the corresponding
module link)",
"Group activity",
"Wrap-up session"))
data.frame(Time = c("Prior to event",
"09:00-11:00 EST",
"11:00-12:00 EST"),
Description = c("Watch pre-recorded lectures/coding sessions (these                                     videos are available in the corresponding module link)",
"Group activity",
"Wrap-up session"))
data.frame(Time = c("Prior to event",
"09:00-11:00 EST",
"11:00-12:00 EST"),
Description = c("Watch pre-recorded lectures/coding sessions (these                                     videos are available in the corresponding module link)",
"Group activity",
"Wrap-up session")) %>%
kbl()
knitr::opts_chunk$set(echo = FALSE)
library(kableExtra)
data.frame(Time = c("Prior to event",
"09:00-11:00 EST",
"11:00-12:00 EST"),
Description = c("Watch pre-recorded lectures/coding sessions (these                                     videos are available in the corresponding module link)",
"Group activity",
"Wrap-up session")) %>%
kable()
?column_spec
data.frame(`Upon completion of this module, learners should be able to:` = c(
"Explain the basic structure and components of a script to create a shiny app",
"Distinguish the features that are part of the user interface (UI) and the features that are part of the server.",
"List and select the most appropriate shiny function for the desired user input",
"Describe how the interactive display of data and/or model results can be useful for policy"
)
)
data.frame(. = c("Upon completion of this module, learners should be able to:",
"Explain the basic structure and components of a script to create a shiny app",
"Distinguish the features that are part of the user interface (UI) and the features that are part of the server.",
"List and select the most appropriate shiny function for the desired user input",
"Describe how the interactive display of data and/or model results can be useful for policy"
)
)
data.frame( = c("Upon completion of this module, learners should be able to:",
"Explain the basic structure and components of a script to create a shiny app",
"Distinguish the features that are part of the user interface (UI) and the features that are part of the server.",
"List and select the most appropriate shiny function for the desired user input",
"Describe how the interactive display of data and/or model results can be useful for policy"
))
c("Upon completion of this module, learners should be able to:",
"Explain the basic structure and components of a script to create a shiny app",
"Distinguish the features that are part of the user interface (UI) and the features that are part of the server.",
"List and select the most appropriate shiny function for the desired user input",
"Describe how the interactive display of data and/or model results can be useful for policy"
)
c("Upon completion of this module, learners should be able to:",
"Explain the basic structure and components of a script to create a shiny app",
"Distinguish the features that are part of the user interface (UI) and the features that are part of the server.",
"List and select the most appropriate shiny function for the desired user input",
"Describe how the interactive display of data and/or model results can be useful for policy"
) %>% kable()
data.frame(x = c("Upon completion of this module, learners should be able to:",
"Explain the basic structure and components of a script to create a shiny app",
"Distinguish the features that are part of the user interface (UI) and the features that are part of the server.",
"List and select the most appropriate shiny function for the desired user input",
"Describe how the interactive display of data and/or model results can be useful for policy"
)) %>% kable()
data.frame(x = c("Upon completion of this module, learners should be able to:",
"Explain the basic structure and components of a script to create a shiny app",
"Distinguish the features that are part of the user interface (UI) and the features that are part of the server.",
"List and select the most appropriate shiny function for the desired user input",
"Describe how the interactive display of data and/or model results can be useful for policy"
)) %>% kable()
data.frame(x = c("Upon completion of this module, learners should be able to:", "Explain the basic structure and components of a script to create a shiny app", "Distinguish the features that are part of the user interface (UI) and the features that are part of the server.", "List and select the most appropriate shiny function for the desired user input", "Describe how the interactive display of data and/or model results can be useful for policy")) %>% kable()
data.frame(x = c("Upon completion of this module, learners should be able to:", "Explain the basic structure and components of a script to create a shiny app", "Distinguish the features that are part of the user interface (UI) and the features that are part of the server.", "List and select the most appropriate shiny function for the desired user input", "Describe how the interactive display of data and/or model results can be useful for policy")) %>% kable() %>% kable_classic()
create_theme(name = "objective-blocks")
distill::create_theme(name = "objective-blocks")
distill::create_article(file = "Activity_4.Rmd")
distill::create_article(file = "Activity_4.Rmd")
