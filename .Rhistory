q9DF$x[i] <- q9(N0 = q9DF$x[1], r = 2, t = q9DF$t[i])
}
ggplot(q9DF) +
geom_point(aes(x = t, y = x)) +
theme_bw()
q9DF
q9 <- function(r, N0, t) {
Nt = N0 + N0*r
return(Nt)
}
q9DF <- data.frame(t = seq(0, 20),
x = c(10, rep(NA, 20)))
for(i in 1:nrow(q9DF)) {
q9DF$x[i] <- q9(N0 = q9DF$x[1], r = 2, t = q9DF$t[i])
}
q9 <- function(r, N0) {
Nt = N0 + N0*r
return(Nt)
}
q9DF <- data.frame(t = seq(0, 20),
x = c(10, rep(NA, 20)))
for(i in 1:nrow(q9DF)) {
q9DF$x[i] <- q9(N0 = q9DF$x[i-1], r = 2)
}
q9DF <- data.frame(t = seq(0, 20),
x = c(10, rep(NA, 20)))
for(i in 2:nrow(q9DF)) {
q9DF$x[i] <- q9(N0 = q9DF$x[i-1], r = 2)
}
ggplot(q9DF) +
geom_point(aes(x = t, y = x)) +
theme_bw()
q9DF
q10 <- function(r, k, Nt0) {
Nt = r*Nt0*(1-Nt0/K)
}
q10DF <- data.frame(t = seq(0, 20),
x = c(10, rep(NA, 20)))
q10DF <- data.frame(t = seq(0, 20),
x = c(10, rep(NA, 20)))
# We'll use Nt0 = 10 and r = 2 as above and
# add a carrying capacity of 5000
for(i in 2:nrow(q10DF)) {
q10DF$x[i] <- q10(N0 = q10DF$x[i-1], r = 2, k = 5000)
}
q10 <- function(r, k, N0) {
Nt = r*N0*(1-N0/K)
}
q10DF <- data.frame(t = seq(0, 20),
x = c(10, rep(NA, 20)))
# We'll use Nt0 = 10 and r = 2 as above and
# add a carrying capacity of 5000
for(i in 2:nrow(q10DF)) {
q10DF$x[i] <- q10(N0 = q10DF$x[i-1], r = 2, k = 5000)
}
q10 <- function(r, k, N0) {
Nt = r*N0*(1-N0/k)
return(Nt)
}
q10DF <- data.frame(t = seq(0, 20),
x = c(10, rep(NA, 20)))
# We'll use Nt0 = 10 and r = 2 as above and
# add a carrying capacity of 5000
for(i in 2:nrow(q10DF)) {
q10DF$x[i] <- q10(N0 = q10DF$x[i-1], r = 2, k = 5000)
}
ggplot(q10DF) +
geom_point(aes(x = t, y = x)) +
theme_bw()
data.frame(x = seq(-10, 10)) %>%
mutate(y = q1(x))
4-14+10
library(shiny); runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
NDVI <- raster("C:/Users/Lyndsie/Documents/GitHub/shiny_workshop/exampleApps/leafletActivity/NDVI.tif")
NDVI[NDVI == 255] <- NA
NDVI_merc <- projectRaster(NDVI, to = "EPSG:3857")
NDVI_merc <- projectRaster(NDVI, CRS = "EPSG:3857")
NDVI_merc <- projectRaster(NDVI, crs = "EPSG:3857")
CRS(NDVI_merc)
crs("EPSG:3857")
NDVI_merc <- projectRaster(NDVI, to = crs("EPSG:3857"))
NDVI_merc <- projectRaster(NDVI, to = "EPSG:3857")
NDVI_merc <- projectRaster(NDVI, "EPSG:3857")
?projectRaster
epsg("EPSG:3857")
epsg
library(raster)
library(rgdal)
library(sp)
epsg
NDVI_merc <- projectRaster(NDVI, crs = "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +a=6378137 +b=6378137 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ")
NDVI[NDVI == 255]
NDVI <- raster("C:/Users/Lyndsie/Documents/GitHub/shiny_workshop/exampleApps/leafletActivity/NDVI.tif")
NDVI[NDVI == 255]
NDVI[NDVI == 255] <- NA
NDVI_merc <- projectRaster(NDVI, crs = "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +a=6378137 +b=6378137 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ")
writeRaster(NDVI_merc, file = "C:/Users/Lyndsie/Documents/GitHub/shiny_workshop/exampleApps/leafletActivity/NDVI_lite.tiff")
writeRaster(NDVI_merc, file = "C:/Users/Lyndsie/Documents/GitHub/shiny_workshop/exampleApps/leafletActivity/NDVI_lite.tiff")
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
?sliderInput
max(world.cities$pop)
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
min(world.cities$pop)
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
world.cities
world.cities %>% filter(pop > 10000)
world.cities %>% filter(pop > 1000000)
world.cities %>% filter(pop > 500000)
world.cities %>% filter(pop > 500000)
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map.R')
runApp('exampleApps/leafletActivity/assignment_map.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
length(unique(NDVI))
runApp('exampleApps/leafletActivity/assignment_map.R')
runApp('exampleApps/leafletActivity/assignment_map.R')
runApp('exampleApps/leafletActivity/assignment_map_solution.R')
?antijoin
library(tidyverse)
?anti_join
roll_dice <- function(min_roll,
max_roll) {
roll <- dunif(min_roll, max_roll)
return(roll)
}
roll_dice <- function(min_roll,
max_roll) {
roll <- runif(1, min_roll, max_roll)
return(roll)
}
runif(100, 1, 6)
roll_dice <- function(min_roll,
max_roll,
nrolls) {
roll <- seq(min_roll, max_roll, 1) %>%
sample_n(nrolls, replace = TRUE)
return(roll)
}
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
library(tidyverse)
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
roll_dice <- function(min_roll,
max_roll,
nrolls) {
roll <- rolls = seq(min_roll, max_roll, 1) %>%
sample_n(nrolls, replace = TRUE)
return(roll)
}
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
roll_dice <- function(min_roll,
max_roll,
nrolls) {
roll <- data.frame(rolls = seq(min_roll, max_roll, 1)) %>%
sample_n(nrolls, replace = TRUE)
return(roll)
}
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
roll_dice <- function(min_roll,
max_roll,
nrolls) {
roll <- data.frame(rolls = seq(min_roll, max_roll, 1)) %>%
sample_n(nrolls, replace = TRUE)
return(as.list(roll))
}
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
roll_dice <- function(min_roll,
max_roll,
nrolls) {
roll <- data.frame(rolls = seq(min_roll, max_roll, 1)) %>%
sample_n(nrolls, replace = TRUE)
return(as.numeric(roll))
}
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
roll_dice(min_roll = 1, max_roll = 6, nrolls = 1)
data.frame(roll = seq(1, 6, 1),
migratory = c("Drought", "Drought",
"Adequate", "Adequate",
"Excellent", "Excellent"),
breeding = c("Adequate", "Drought",
"Adequate", "Drought",
"Adequate", "Drought"))
data.frame(roll = seq(1, 6, 1),
migratory = c("Drought", "Drought",
"Adequate", "Adequate",
"Excellent", "Excellent"),
breeding = c("Adequate", "Drought",
"Adequate", "Drought",
"Adequate", "Drought")) %>%
sample_n(nrolls, replace = TRUE)
roll_dice <- function(nrolls) {
roll <- data.frame(roll = seq(1, 6, 1),
migratory = c("Drought", "Drought",
"Adequate", "Adequate",
"Excellent", "Excellent"),
breeding = c("Adequate", "Drought",
"Adequate", "Drought",
"Adequate", "Drought")) %>%
sample_n(nrolls, replace = TRUE)
return(roll)
}
roll_dice(1)
roll_dice(1)
roll_dice(1)
roll_dice(1)
roll_dice(1)
c(rep("Liberal harvest", 3), rep("No harvest", 3))
data.frame(scenario = c(rep("Liberal harvest", 3),
rep("No harvest", 3)),
Result = rep(c("Population exceeds goal",
"Population within goal",
"Population below goal"), 2))
outcomes <- data.frame(scenario = c(rep("Liberal harvest", 3),
rep("No harvest", 3)),
result = rep(c("Population exceeds goal",
"Population within goal",
"Population below goal"), 2),
opinion = NA)
data.frame(scenario = c("A", "B", "C"),
current_population = c(700000, 200000, 350000),
migratory_landscape = c("Normal", "Normal",
"Changing.  Corn prices drop.
Farmers enroll land in conservation
programs or plant crop ground to
pasture.  Major food source (corn)
disappears from the migratory route."))
data.frame(scenario = c("A", "B", "C"),
current_population = c(700000, 200000, 350000),
migratory_landscape = c("Normal", "Normal",
paste(c("Changing.  Corn prices drop.",
"Farmers enroll land in conservation",
"programs or plant crop ground to",
"pasture.  Major food source (corn)",
"disappears from the migratory route."))
)
)
paste(c("Changing.  Corn prices drop.",
"Farmers enroll land in conservation",
"programs or plant crop ground to",
"pasture.  Major food source (corn)",
"disappears from the migratory route."))
paste("Changing.  Corn prices drop.",
"Farmers enroll land in conservation",
"programs or plant crop ground to",
"pasture.  Major food source (corn)",
"disappears from the migratory route.")
data.frame(scenario = c("A", "B", "C"),
current_population = c(700000, 200000, 350000),
migratory_landscape = c("Normal", "Normal",
paste("Changing.  Corn prices drop.",
"Farmers enroll land in conservation",
"programs or plant crop ground to",
"pasture.  Major food source (corn)",
"disappears from the migratory route.")))
data.frame(scenario = c("A", "B", "C"),
current_population = c(700000, 200000, 350000),
migratory_landscape = c("Normal", "Normal",
paste("Changing.  Corn prices drop.",
"Farmers enroll land in conservation",
"programs or plant crop ground to",
"pasture.  Major food source (corn)",
"disappears from the migratory route.")),
special_message = "", "disease strikes migrating cranes in previous years!", "")
data.frame(scenario = c("A", "B", "C"),
current_population = c(700000, 200000, 350000),
migratory_landscape = c("Normal", "Normal",
paste("Changing.  Corn prices drop.",
"Farmers enroll land in conservation",
"programs or plant crop ground to",
"pasture.  Major food source (corn)",
"disappears from the migratory route.")),
special_message = c("", "disease strikes migrating cranes in previous years!", ""))
data.frame(preferences = c(1, 0.5, 0.5, 0, 0, 0),
probability = c(0.5, 0.2, 0.1, 0.1, 0.1))
data.frame(preferences = c(1, 0.5, 0.5, 0, 0, 0),
probability = c(0.4, 0.2, 0.1, 0.1, 0.1, 0.1))
data.frame(preference = c(1, 0.5, 0.5, 0, 0, 0),
probability = c(0.4, 0.2, 0.1, 0.1, 0.1, 0.1)) %>%
mutate(utility = prefernce*probability)
data.frame(preference = c(1, 0.5, 0.5, 0, 0, 0),
probability = c(0.4, 0.2, 0.1, 0.1, 0.1, 0.1)) %>%
mutate(utility = preference*probability)
shiny::runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
?numericInput
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
library(shinyWidgets)
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h1("Pretty checkbox"),
br(),
fluidRow(
column(
width = 4,
prettyCheckbox(
inputId = "checkbox1",
label = "Click me!"
),
verbatimTextOutput(outputId = "res1"),
br(),
prettyCheckbox(
inputId = "checkbox4",
label = "Click me!",
outline = TRUE,
plain = TRUE,
icon = icon("thumbs-up")
),
verbatimTextOutput(outputId = "res4")
),
column(
width = 4,
prettyCheckbox(
inputId = "checkbox2",
label = "Click me!",
thick = TRUE,
animation = "pulse",
status = "info"
),
verbatimTextOutput(outputId = "res2"),
br(),
prettyCheckbox(
inputId = "checkbox5",
label = "Click me!",
icon = icon("check"),
animation = "tada",
status = "default"
),
verbatimTextOutput(outputId = "res5")
),
column(
width = 4,
prettyCheckbox(
inputId = "checkbox3",
label = "Click me!",
shape = "round",
status = "danger",
fill = TRUE,
value = TRUE
),
verbatimTextOutput(outputId = "res3")
)
)
)
server <- function(input, output, session) {
output$res1 <- renderPrint(input$checkbox1)
output$res2 <- renderPrint(input$checkbox2)
output$res3 <- renderPrint(input$checkbox3)
output$res4 <- renderPrint(input$checkbox4)
output$res5 <- renderPrint(input$checkbox5)
}
if (interactive())
shinyApp(ui, server)
# Inline example ----
ui <- fluidPage(
tags$h1("Pretty checkbox: inline example"),
br(),
prettyCheckbox(
inputId = "checkbox1",
label = "Click me!",
status = "success",
outline = TRUE,
inline = TRUE
),
prettyCheckbox(
inputId = "checkbox2",
label = "Click me!",
thick = TRUE,
shape = "curve",
animation = "pulse",
status = "info",
inline = TRUE
),
prettyCheckbox(
inputId = "checkbox3",
label = "Click me!",
shape = "round",
status = "danger",
value = TRUE,
inline = TRUE
),
prettyCheckbox(
inputId = "checkbox4",
label = "Click me!",
outline = TRUE,
plain = TRUE,
animation = "rotate",
icon = icon("thumbs-up"),
inline = TRUE
),
prettyCheckbox(
inputId = "checkbox5",
label = "Click me!",
icon = icon("check"),
animation = "tada",
status = "primary",
inline = TRUE
),
verbatimTextOutput(outputId = "res")
)
server <- function(input, output, session) {
output$res <- renderPrint(
c(input$checkbox1,
input$checkbox2,
input$checkbox3,
input$checkbox4,
input$checkbox5)
)
}
if (interactive())
shinyApp(ui, server)
runApp('exampleApps/craneGame')
install.packages("shinywidgets")
install.packages("shinyWidgets")
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
tags$video(src = "craneMap.mp4",
type = "video/mp4",
autoplay = TRUE,
controls = "controls")
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
dev.off()
runApp('exampleApps/craneGame')
runApp('exampleApps/craneGame')
shiny::runApp('exampleApps/craneGame')
