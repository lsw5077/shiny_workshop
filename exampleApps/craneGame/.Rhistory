shiny::runApp()
n <- vector(mode = 'numeric', length = length(0:tmax))
n <- vector(mode = 'numeric', length = length(0:tmax))
t0 <- 0 # initial time
tmax <- 10 # final time
n0 <- 1 # initial population size
r <- 0.1 # per-capita growth rate
n <- vector(mode = 'numeric', length = length(0:tmax))
n
n[1] <- n0
for(t in (t0 + 1):tmax){
n[t + 1] <- n[t] + t*n[t]
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("deSolve")
library(deSolve)
getwd()
read.delim("data/cranesRaw.txt")
read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE) %>%
filter(year(OBSERVATION.DATE == 2019))
library(tidyverse)
library(lubridate)
cranEbird <- read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE) %>%
filter(year(OBSERVATION.DATE == 2019))
cranEbird <- read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE) %>%
filter(year(OBSERVATION.DATE) == 2019)
read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE)
read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE) %>%
filter(year(as.Date(OBSERVATION.DATE)) == 2019)
cranEbird <- read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE) %>%
filter(year(as.Date(OBSERVATION.DATE)) == 2019)
ecranes <- read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE) %>%
filter(year(as.Date(OBSERVATION.DATE)) == 2019)
write.csv(ecranes, file = "data/ecranes.csv")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ecranes
ecranes %>% mutate(days = ecranes$OBSERVATION.DATE - lag(ecranes$OBSERVATION.DATE))
ecranes %>% mutate(days = ecranes$OBSERVATION.DATE - lag(ecranes$OBSERVATION.DATE))
lag(ecranes$OBSERVATION.DATE)
ecranes %>% mutate(days = as.Date(ecranes$OBSERVATION.DATE) - lag(as.Date(ecranes$OBSERVATION.DATE)))
ecranes %>% mutate(days = as.numeric(as.Date(ecranes$OBSERVATION.DATE) - lag(as.Date(ecranes$OBSERVATION.DATE))))
runApp()
runApp()
runApp()
runApp()
runApp()
?addCircleMarkers
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ecranes <- read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE) %>%
filter(year(as.Date(OBSERVATION.DATE)) > 2010)
# write to file
write.csv(ecranes, file = "data/ecranes.csv")
as.month(1)
Month(1)
runApp()
runApp()
?sliderInput
runApp()
read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE) %>%
filter(year(as.Date(OBSERVATION.DATE)) > 2010) %>%
mutate(Month = month(OBSERVATION.DATE))
seq("January" : "December")
montsh
months
month()
dateChoices <- seq("January", "February", "March",
"April", "May", "June",
"July", "August", "September",
"October", "November", "December")
ecranes <- read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE) %>%
filter(year(as.Date(OBSERVATION.DATE)) > 2010) %>%
mutate(Month = month(OBSERVATION.DATE))
# write to file
write.csv(ecranes, file = "data/ecranes.csv")
runApp()
runApp()
?month
read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE) %>%
filter(year(as.Date(OBSERVATION.DATE)) > 2010) %>%
mutate(Month = month(OBSERVATION.DATE, label = TRUE))
read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE) %>%
filter(year(as.Date(OBSERVATION.DATE)) > 2010) %>%
mutate(Month = month(OBSERVATION.DATE,
label = TRUE,
abbr = FALSE))
ecranes <- read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE) %>%
filter(year(as.Date(OBSERVATION.DATE)) > 2010) %>%
mutate(Month = month(OBSERVATION.DATE,
label = TRUE,
abbr = FALSE))
# write to file
write.csv(ecranes, file = "data/ecranes.csv")
runApp()
?sliderInput
month.name
runApp()
runApp()
ecranes <- read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE) %>%
filter(year(as.Date(OBSERVATION.DATE)) > 2015) %>%
mutate(Month = month(OBSERVATION.DATE,
label = TRUE,
abbr = FALSE))
# write to file
write.csv(ecranes, file = "data/ecranes.csv")
runApp()
ecranes <- read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE) %>%
filter(year(as.Date(OBSERVATION.DATE)) > 2015) %>%
mutate(Month = month(OBSERVATION.DATE,
label = TRUE,
abbr = FALSE))
# write to file
write.csv(ecranes, file = "data/ecranes.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
read.delim("data/cranesRaw.txt")
ecranes <- read.delim("data/cranesRaw.txt") %>%
select(LATITUDE,
LONGITUDE,
OBSERVATION.DATE,
LOCALITY) %>%
filter(year(as.Date(OBSERVATION.DATE)) > 2015) %>%
mutate(Month = month(OBSERVATION.DATE,
label = TRUE,
abbr = FALSE))
# write to file
write.csv(ecranes, file = "data/ecranes.csv")
?addCircleMarkers
runApp()
runApp()
knitr::opts_chunk$set(echo = FALSE)
library(wingspan)
library(colorblindr)
library(tidyverse)
birds <- wingspan::birds
Data1 <- birds %>% filter(nest_type == "Platform")
data_2 <- birds %>% filter(nest_type == "Cavity")
head(Data1)
head(as.data.frame(Data1))
Data1[1:5, 1:5]
Data1[1:5, 1:5]
birds <- wingspan::birds
platform_nesters <- birds %>% filter(nest_type == "Platform") %>% select(common_name, scientific_name, nest_type, egg_capacity, wingspan, forest, grassland, wetland, invertebrate, seed, fish, fruit, rodent, nectar, any_food)
cavity_nesters <- birds %>% filter(nest_type == "Cavity")%>% select(common_name, scientific_name, nest_type, egg_capacity, wingspan, forest, grassland, wetland, invertebrate, seed, fish, fruit, rodent, nectar, any_food)
platform_nesters[1:5, 1:5]
platform_nesters[1:5, 1:5]
platform_nesters %>%
mutate(egg_efficiency = # calculate return of eggs/ unit food
egg_capacity/
(seed + fish +
fruit + rodent +
nectar + any_food)) %>%
arrange(desc(egg_efficiency)) %>% # arrange in descending order
select(common_name, egg_efficiency) %>%
filter(egg_efficiency >= 3)
filter(egg_efficiency >= 3)
platform_nesters %>%
mutate(egg_efficiency = # calculate return of eggs/ unit food
egg_capacity/
(seed + fish +
fruit + rodent +
nectar + any_food)) %>%
arrange(desc(egg_efficiency)) %>% # arrange in descending order
select(common_name, egg_efficiency) %>%
filter(egg_efficiency >= 3)
runApp()
runApp()
read.csv("data/cranePics.csv")
runApp()
picList <- read.csv("data/cranePics.csv")
picList
runApp()
runApp()
runApp('~/GitHub/shiny_workshop/exampleApps/CrappieFishApp')
runApp('~/GitHub/shiny_workshop/exampleApps/CrappieFishApp')
runApp('~/GitHub/shiny_workshop/exampleApps/CrappieFishApp')
runApp('~/GitHub/shiny_workshop/exampleApps/CrappieFishApp')
runApp('~/GitHub/shiny_workshop/exampleApps/CrappieFishApp')
runApp('~/GitHub/shiny_workshop/exampleApps/CrappieFishApp')
shiny::runApp()
